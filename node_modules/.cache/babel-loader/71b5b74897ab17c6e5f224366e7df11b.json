{"ast":null,"code":"// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\"\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload\n  };\n};\n\nexport const fetchData = () => {\n  var _s = $RefreshSig$();\n\n  return _s(async dispatch => {\n    _s();\n\n    dispatch(fetchDataRequest());\n\n    try {\n      const blockchain = useSelector(state => state.blockchain);\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let minted = await store.getState().blockchain.smartContract.methods.balanceOf(account).call(); // let cost = await store\n      //   .getState()\n      //   .blockchain.smartContract.methods.cost()\n      //   .call();\n\n      dispatch(fetchDataSuccess({\n        totalSupply,\n        minted // cost,\n\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  }, \"6e1kKHH2al+M+ZnSmziJv1USaFc=\", true);\n};","map":{"version":3,"sources":["C:/Users/Yassine/Documents/nft/minting/straight-code-minting-dapp/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","dispatch","blockchain","useSelector","state","totalSupply","getState","smartContract","methods","call","minted","balanceOf","account","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AACpC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAID,OAAD,IAAa;AACnC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAG,MAAM;AAAA;;AAC7B,YAAO,MAAOC,QAAP,IAAoB;AAAA;;AACzBA,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,YAAMO,UAAU,GAAGC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACF,UAAlB,CAA9B;AACA,UAAIG,WAAW,GAAG,MAAMX,KAAK,CAC1BY,QADqB,GAErBJ,UAFqB,CAEVK,aAFU,CAEIC,OAFJ,CAEYH,WAFZ,GAGrBI,IAHqB,EAAxB;AAIH,UAAIC,MAAM,GAAG,MAAMhB,KAAK,CAClBY,QADa,GAEbJ,UAFa,CAEFK,aAFE,CAEYC,OAFZ,CAEoBG,SAFpB,CAE8BC,OAF9B,EAGbH,IAHa,EAAnB,CANK,CAUF;AACA;AACA;AACA;;AAEAR,MAAAA,QAAQ,CACNJ,gBAAgB,CAAC;AACfQ,QAAAA,WADe;AAErBK,QAAAA,MAFqB,CAGf;;AAHe,OAAD,CADV,CAAR;AAOD,KAtBD,CAsBE,OAAOG,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAZ,MAAAA,QAAQ,CAACF,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GA5BD;AA6BD,CA9BM","sourcesContent":["// log\r\nimport store from \"../store\";\r\n\r\nconst fetchDataRequest = () => {\r\n  return {\r\n    type: \"CHECK_DATA_REQUEST\",\r\n  };\r\n};\r\n\r\nconst fetchDataSuccess = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_SUCCESS\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst fetchDataFailed = (payload) => {\r\n  return {\r\n    type: \"CHECK_DATA_FAILED\",\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const fetchData = () => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchDataRequest());\r\n    try {\r\n      const blockchain = useSelector((state) => state.blockchain);\r\n      let totalSupply = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.totalSupply()\r\n        .call();\r\n\t  let minted = await store\r\n        .getState()\r\n        .blockchain.smartContract.methods.balanceOf(account)\r\n        .call();\r\n      // let cost = await store\r\n      //   .getState()\r\n      //   .blockchain.smartContract.methods.cost()\r\n      //   .call();\r\n\r\n      dispatch(\r\n        fetchDataSuccess({\r\n          totalSupply,\r\n\t\t  minted,\r\n          // cost,\r\n        })\r\n      );\r\n    } catch (err) {\r\n      console.log(err);\r\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}